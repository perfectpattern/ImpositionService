package de.perfectpattern.print.imposition.service.imposition;

import com.lowagie.text.Document;
import com.lowagie.text.pdf.*;
import de.perfectpattern.print.imposition.service.about.AboutService;
import de.perfectpattern.print.imposition.service.imposition.layout.LayoutProcessor;
import de.perfectpattern.print.imposition.service.imposition.layout.object.PlacedObject;
import de.perfectpattern.print.imposition.service.imposition.layout.label.AbstractLabel;
import de.perfectpattern.print.imposition.model.Position;
import de.perfectpattern.print.imposition.service.imposition.layout.Layout;
import de.perfectpattern.print.imposition.model.Sheet;
import de.perfectpattern.print.imposition.model.type.Anchor;
import de.perfectpattern.print.imposition.model.type.Side;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;

import java.io.ByteArrayOutputStream;
import java.util.List;
import java.util.Map;

@Controller
public class ImpositionServiceImpl implements ImpositionService {

    private static final Logger log = LoggerFactory.getLogger(ImpositionServiceImpl.class);

    @Autowired
    private LayoutProcessor layoutProcessor;

    @Autowired
    private AboutService aboutService;

    /**
     * Default constructor.
     */
    public ImpositionServiceImpl() {
    }

    @Override
    public byte[] impose(Sheet sheet) throws Exception {

        // generate layout
        final Layout layout = layoutProcessor.generateLayout(sheet);

        // create PDF output
        final ByteArrayOutputStream bos = new ByteArrayOutputStream();

        Document doc = new Document(
                new com.lowagie.text.Rectangle(
                    sheet.getMediaBox().getWidth(),
                    sheet.getMediaBox().getHeight()
                )
        );

        PdfWriter pdfWriter = PdfWriter.getInstance(doc, bos);

        // set boxes
        pdfWriter.setBoxSize(
                "trim",
                new com.lowagie.text.Rectangle(
                        sheet.getTrimBox().getLlx(),
                        sheet.getTrimBox().getLly(),
                        sheet.getTrimBox().getUrx(),
                        sheet.getTrimBox().getUry()
                )
        );

        // init PDF document
        doc.open();
        doc.addTitle("Sheet " + sheet.getSheetId());
        doc.addAuthor("PerfectPattern GmbH");
        doc.addSubject("Printform generated by sPrintOne.");
        doc.addKeywords(aboutService.getCommitIdAbbrev());
        doc.addCreator(aboutService.getAppName() + " " + aboutService.getVersion());

        // create front page
        doc.newPage();

        placeLabels(pdfWriter, layout.getLabels(), sheet, Side.Front);

        for (PlacedObject placedObject : layout.getPlacedObjectsFront()) {
            try {
                placedObject.write(pdfWriter);
            } catch (Exception ex) {
                log.error("Error processing PlacedObject on Front: " + placedObject.toString());
                throw ex;
            }
        }


        // create  back page
        if (layout.getPlacedObjectsBack() != null && layout.getPlacedObjectsBack().size() > 0) {
            doc.newPage();

            placeLabels(pdfWriter, layout.getLabels(), sheet, Side.Back);

            for (PlacedObject placedObject : layout.getPlacedObjectsBack()) {
                try {
                    placedObject.write(pdfWriter);
                } catch (Exception ex) {
                    log.error("Error processing PlacedObject on Back: " + placedObject.toString());
                    throw ex;
                }
            }
        }

        // close document
        doc.close();

        // return document as byte array
        return bos.toByteArray();
    }

    /**
     * Placement of labels on the specified surface.
     */
    private void placeLabels(PdfWriter pdfWriter, Map<Anchor, List<AbstractLabel>> labels, Sheet sheet, Side side) {

        // get border width
        float borderWidthLeft = sheet.getSurfaceContentsBox().getUrx();
        float borderWidthRight = sheet.getSurfaceContentsBox().getLlx();

        for (Position position : sheet.getPositions()) {
            borderWidthLeft = position.getAbsoluteBox().getLlx() < borderWidthLeft ? position.getAbsoluteBox().getLlx() : borderWidthLeft;
            borderWidthRight = position.getAbsoluteBox().getUrx() > borderWidthRight ? position.getAbsoluteBox().getUrx() : borderWidthRight;
        }

        borderWidthRight = sheet.getSurfaceContentsBox().getWidth() - borderWidthRight;

        float border = borderWidthLeft < borderWidthRight ? borderWidthLeft : borderWidthRight;

        // init offset variables
        float offsetTopLeft = 0;
        float offsetTopRight = 0;
        float offsetBottomLeft = 0;
        float offsetBottomRight = 0;

        // place labels
        for (Anchor anchorKey : labels.keySet()) {
            for (AbstractLabel label : labels.get(anchorKey)) {

                // define anchor for side
                Anchor anchor = null;

                if (Side.Front == side) {
                    anchor = anchorKey;

                } else {

                    if (Anchor.TopLeft == anchorKey) {
                        anchor = Anchor.TopRight;

                    } else if (Anchor.TopRight == anchorKey) {
                        anchor = Anchor.TopLeft;

                    } else if (Anchor.BottomLeft == anchorKey) {
                        anchor = Anchor.BottomRight;

                    } else if (Anchor.BottomRight == anchorKey) {
                        anchor = Anchor.BottomLeft;

                    }
                }

                // draw labels
                if (Anchor.TopLeft == anchor) {
                    float offsetY = sheet.getTrimBox().getUry() - label.getWidth() - offsetTopLeft;
                    float offsetX = sheet.getTrimBox().getLlx();
                    label.placeLabel(pdfWriter, side, anchor, offsetX, offsetY, border);
                    offsetTopLeft += label.getWidth();

                } else if (Anchor.TopRight == anchor) {
                    float offsetY = sheet.getTrimBox().getUry() - label.getWidth() - offsetTopRight;
                    float offsetX = sheet.getTrimBox().getUrx() - border;
                    label.placeLabel(pdfWriter, side, anchor, offsetX, offsetY, border);
                    offsetTopRight += label.getWidth();

                } else if (Anchor.BottomLeft == anchor) {
                    float offsetY = sheet.getTrimBox().getLly() + offsetBottomLeft;
                    float offsetX = sheet.getTrimBox().getLlx();
                    label.placeLabel(pdfWriter, side, anchor, offsetX, offsetY, border);
                    offsetBottomLeft += label.getWidth();

                } else if (Anchor.BottomRight == anchor) {
                    float offsetY = sheet.getTrimBox().getLly() + offsetBottomRight;
                    float offsetX = sheet.getTrimBox().getUrx() - border;
                    label.placeLabel(pdfWriter, side, anchor, offsetX, offsetY, border);
                    offsetBottomRight += label.getWidth();
                }

            }
        }
    }

}
