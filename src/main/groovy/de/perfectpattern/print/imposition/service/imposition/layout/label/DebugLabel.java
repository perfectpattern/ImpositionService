package de.perfectpattern.print.imposition.service.imposition.layout.label;

import com.lowagie.text.pdf.PdfContentByte;
import com.lowagie.text.pdf.PdfTemplate;
import de.perfectpattern.print.imposition.model.Sheet;
import de.perfectpattern.print.imposition.model.type.Color;
import de.perfectpattern.print.imposition.model.type.Side;
import de.perfectpattern.print.imposition.service.about.AboutService;
import de.perfectpattern.print.imposition.util.ApplicationContextUtil;
import de.perfectpattern.print.imposition.util.FontUtil;

import java.util.ArrayList;
import java.util.List;

import static de.perfectpattern.print.imposition.util.DimensionUtil.mm2dtp;
import static de.perfectpattern.print.imposition.util.FontUtil.FONT_REGULAR;

/**
 * A Debug info label.
 */
public class DebugLabel extends AbstractLabel {

    private final AboutService aboutService;

    private final Sheet sheet;

    /**
     * Custom constructor.
     */
    public DebugLabel(Sheet sheet) {
        super(mm2dtp(50));

        this.aboutService = ApplicationContextUtil.getApplicationContext().getBean(AboutService.class);
        this.sheet = sheet;
    }

    @Override
    public PdfTemplate createLabel(PdfContentByte cb, Side side, float distanceEdge) {
        PdfTemplate template = cb.createTemplate(getWidth(), distanceEdge);

        float labelHeight = distanceEdge > getMaxHeight() ? getMaxHeight() : distanceEdge;

        template.setColorFill(Color.WHITE.cmyk());
        template.rectangle(0,0,getWidth(), labelHeight);
        template.fill();

        template.setColorFill(Color.GRAY.cmyk());
        template.setColorStroke(Color.GRAY.cmyk());

        if(Side.Front == side) {

            // debug text
            List<String> lines = new ArrayList<>();
            lines.add("LayoutTaskId: " + (sheet.getLayoutTaskId() == null ? "n. a." : sheet.getLayoutTaskId()));
            lines.add("Imposition: " + aboutService.getAppName() + " " + aboutService.getVersion() + "  -  PDF Library: " + aboutService.getPdfLibrary());
            lines.add("generated by PerfectPattern");
            textLines(lines, template, labelHeight);

            // origin mark
            originMarkFront(template, labelHeight);

        } else if (Side.Back == side) {

            // origin mark
            originMarkBack(template, labelHeight);
        }

        return template;
    }

    private void textLines(List<String> lines, PdfTemplate template, float height) {
        template.beginText();
        template.setFontAndSize(FONT_REGULAR, 3.2f);

        for(int i = 0; i < lines.size(); i ++) {
            String line = lines.get(i);
            float offset = (i + 1) * 3.9f;

            if(height - offset > mm2dtp(1)) {
                template.setTextMatrix(mm2dtp(2), height - offset);
                template.showText(line);
            }
        }

        template.endText();
    }

    /**
     * Create an origin mark front.
     * @param template The target template
     */
    private void originMarkFront(PdfTemplate template, float height) {

        // line
        template.setLineWidth(1);
        template.moveTo(getWidth() - mm2dtp(5), mm2dtp(1));
        template.lineTo(getWidth(), mm2dtp(1));
        template.moveTo(getWidth(), mm2dtp(1));
        template.lineTo(getWidth(), height);
        template.stroke();

        // text
        template.beginText();

        template.setFontAndSize(FontUtil.FONT_REGULAR, 4);
        template.showTextAligned(
                PdfContentByte.ALIGN_LEFT,
                height < mm2dtp(6) ? "o" : "origin",
                getWidth() - mm2dtp(2.6f), mm2dtp(2f), 90);

        template.setFontAndSize(FontUtil.FONT_REGULAR, 3);
        template.showTextAligned(
                PdfContentByte.ALIGN_LEFT,
                height < mm2dtp(6) ? "(f)" : "(front)",
                getWidth() - mm2dtp(1), mm2dtp(2f), 90);

        template.endText();
    }

    /**
     * Create an origin mark back.
     * @param template The target template
     */
    private void originMarkBack(PdfTemplate template, float height) {

        // line
        template.setLineWidth(1);
        template.moveTo(0, mm2dtp(1));
        template.lineTo(mm2dtp(5), mm2dtp(1));
        template.moveTo(0, mm2dtp(1));
        template.lineTo(0, height);
        template.stroke();

        // text
        template.beginText();

        template.setFontAndSize(FontUtil.FONT_REGULAR, 4);
        template.showTextAligned(
                PdfContentByte.ALIGN_RIGHT,
                height < mm2dtp(6) ? "o" : "origin",
                mm2dtp(2.6f), mm2dtp(2f), 270);

        template.setFontAndSize(FontUtil.FONT_REGULAR, 3);
        template.showTextAligned(
                PdfContentByte.ALIGN_RIGHT,
                height < mm2dtp(6) ? "(b)" : "(back)",
                mm2dtp(1), mm2dtp(2f), 270);

        template.endText();
    }
}
